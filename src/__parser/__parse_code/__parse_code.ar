import "../__parse_value/__variable" as *
import "../__parse_value" as *
import "../__parse_for" as *

let __parse_code(segments) = do
    let output = []
    let i = 0
    while (i < segments.length) do
        if (segments[i].type == "code") do
            let command = segments[i].command
            let value = segments[i].value
            if (command == "if") do
                let condition = __parse_value(value)
                if (not condition.hasParsed) throwError("parsing error in neon.ar", "invalid syntax")
                for (j from i+1 to segments.length) do
                    let j = (segments.length - j) + i
                    let segment = segments[j]
                    if (segment.type=="code" && segment.command == "endif") do
                        if (segment.value.strip(" \n") != "") throwError("parsing error in neon.ar", "invalid syntax")
                        let innerSegments = segments[i+1:j]
                        let blocks = []
                        let currentCondition = condition.value
                        let currentSegments = []
                        let isElse = false
                        let Else = null
                        for (k from 0 to innerSegments.length) do
                            let currentSegment = innerSegments[k]
                            if (currentSegment.type=="code") do
                                if (currentSegment.command == "elif" || currentSegment.command == "elseif" || currentSegment.command == "else") do
                                    blocks.append({condition:currentCondition, block:__parse_code(currentSegments)})
                                    if (currentSegment.command != "else") do
                                        currentSegments = []
                                        let condition = __parse_value(currentSegment.value)
                                        if (not condition.hasParsed) throwError("parsing error in neon.ar", "invalid syntax")
                                        currentCondition = condition.value
                                    else do
                                        if (currentSegment.value.strip(" \n") != "") throwError("parsing error in neon.ar", "invalid syntax")
                                        isElse = true
                                        currentSegments = innerSegments[k+1:]
                                        break
                                    continue
                            currentSegments.append(currentSegment)
                        if (not isElse) blocks.append({condition:currentCondition, block:__parse_code(currentSegments)})
                        else Else = currentSegments
                        output.append({type:"if", blocks:blocks, else:Else})
                        i = j
                        break
            else if (command == "for") i = __parse_for(value, segments, i, output)
            else throwError("parsing error in neon.ar", "Unknown command type: "+command)
            i+=1
            continue
        output.append(segments[i])
        i+=1
    return output