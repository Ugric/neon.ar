import "__parse_value" as *
import "__parse_comment" as *

let startingsIndex = {'{': 0, '%': 1, '#': 2}
let startings = ["{", "%", "#"]
let endings = ["}", "%", "#"]

let __parser(html) = do
    let positions = []

    let output = []
    let insideTemplate = false
    let templateType = null
    let lastPos = 0
    let postStrip = false
    let i = 0
    while (i < html.length) do
        if (insideTemplate) do
            let splitted  = html[i:].split(endings[templateType]+"}")
            if (splitted.length == 0) throwError("parsing error in neon.ar", "invalid syntax")
            let looking_at = 0
            let parsedText = null
            let parsed = {hasParsed:false}
            let preStrip = false
            postStrip = false
            while ((not parsed.hasParsed) && looking_at < splitted.length-1) do
                preStrip = false
                postStrip = false
                looking_at+=1
                parsedText = splitted[:looking_at].join(endings[templateType]+"}")
                if (templateType == 0) parsed = __parse_clean(parsedText)
                else if (templateType == 1) do
                    let parsedText = parsedText
                    if (parsedText.length >= 2) do
                        preStrip = parsedText[0:2] == "- "
                        if (preStrip) parsedText = parsedText[1:]
                        postStrip = parsedText[-2:] == " -"
                        if (postStrip) parsedText = parsedText[:-1]
                    parsed = {hasParsed: true, value:null}
                else if (templateType == 2) parsed = __parse_comment(parsedText)
            if (not parsed.hasParsed) throwError("parsing error in neon.ar", "invalid syntax")
            if (preStrip && output[-1].type =="html") output[-1].html=output[-1].html.rightstrip(" \n")
            if (parsed.value) output.append(parsed.value)
            i+=parsedText.length+2
            insideTemplate = false
            lastPos = i
        else do
            if (i+1>=html.length || html[i+1] not in startings) do
                i+=html[i:].splitN('{', 2)[0].length
                continue
            insideTemplate = true
            templateType = startingsIndex[html[i+1]]
            output.append({type:"html", html:html[lastPos:i]})
            if (postStrip) output[-1].html=output[-1].html.leftstrip(" \n")
            i+=2
    if (insideTemplate) throwError("parsing error in neon.ar", "invalid syntax")
    output.append({type:"html", html:html[lastPos:]})
    if (postStrip) output[-1].html=output[-1].html.leftstrip(" \n")
    return output