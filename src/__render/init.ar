import "__switch" as *
import "bleach.ar" as bleach
import "__operations"
import "__render" as *
import "__built_ins" as *


__switch.html(segment, stack) = segment.html


__switch.clean(segment, stack) = do
    let value = __render(segment.value, stack)
    if (value != null) return bleach.clean(string(value))
    return ""
    
__switch.not(segment, stack) = do
    let value = __render(segment.value, stack)
    return not value

__switch.filter(segment, stack) = do
    let value = __render(segment.value, stack)
    let filter = __render(segment.filter, stack)
    return filter([value], {})

__switch.variable(segment, stack) = do
    value = null
    for (i from 0 to stack.length) do
        let scope = stack[stack.length-i-1]
        if (segment.name in scope) do
            return scope[segment.name]

__switch.json(segment, stack) = json.parse(segment.json)

__switch.lookup(segment, stack) = do
    let value = __render(segment.value, stack)
    let lookup = __render(segment.lookup, stack)
    if (lookup in value) return value[lookup]

__switch.if(segment, stack) = do
    for (i from 0 to segment.blocks.length) do
        let condition = __render(segment.blocks[i].condition, stack)
        if (condition) return __render_segments(segment.blocks[i].block, stack.concat([{}]))
    return __render_segments(segment.else, stack.concat([{}]))


__switch.for(segment, stack) = do
    term.log(segment)
    let iterable = __render(segment.iterable, stack)
    if (iterable.length == 0) return
    let loop = {first: iterable[0], last: iterable[iterable.length-1], length:iterable.length}
    let output = []
    for (i from 0 to loop.length) do
        loop.index = i+1
        loop.index0 = i+1
        loop.revindex = loop.length - loop.index
        loop.revindex0 = loop.revindex = loop.length - loop.index0
        let scope = {loop:loop}
        scope[segment.variable] = iterable[i]
        output.append(__render_segments(segment.block, stack.concat([scope])))
    return output.join('')